syntax = "proto3";
package SimpleDB.Service;

service Query {
  rpc ExecuteSQLProgram (ExecutionRequest) returns (ExecutionBatchResponse);
}

message ExecutionRequest {
  string sql = 1;
}

message ExecutionBatchResponse {
  repeated ExecutionResponse responses = 1;
  Stats stats = 2;
}

message ExecutionResponse {
  oneof response {
    ExecutionResult result = 1;
    ExecutionError error = 2;
  }
  Stats stats = 3;
}

message Stats {
    int32 elapse = 1;
}

message ExecutionResult {
  oneof data {
    PlainResult plain = 1;
    QueryResult query = 2;
    ShowTableResult show_table = 3;
    ShowDatabasesResult show_databases = 4;
    DescribeTableResult describe_table = 5;
    ShowIndexesResult show_indexes = 6;
  }
}

message ExecutionError {
  enum Type {
    ERR_UNSPECIFIED = 0;
    ERR_INTERNAL = 1;
    ERR_UNKNOWN = 2;
    ERR_INCOMPATIBLE_VALUE = 3;
    ERR_SYNTAX = 4;
    ERR_DATABASE_EXIST = 5;
    ERR_CREATE_DATABASE = 6;
    ERR_DATABASE_NOT_EXIST = 7;
  }
  string message = 1;
  Type type = 2;
}

message PlainResult {
  string msg = 1;
}

// Query result: result for queries.
message QueryResult {
  repeated QueryColumn columns = 1;
  repeated QueryRow rows = 2;
}

message QueryColumn {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_INT = 1;
    TYPE_FLOAT = 2;
    TYPE_VARCHAR = 3;
  }
  string name = 1;
  Type type = 2;
}

message QueryRow {
  repeated QueryValue values = 1;
}

message QueryValue {
  oneof value {
    int32 int_value = 1;
    float float_value = 2;
    string varchar_value = 3;
  }
}

// SHOW TABLE result.
message ShowTableResult {
  repeated string tables = 1;
}

// SHOW DATABASAES result.
message ShowDatabasesResult {
  repeated string databases = 1;
}

// DESCRIBE TABLE result.
message DescribeTableResult {
  repeated ColumnDescription columns = 1;
}

message ColumnDescription {
  string field = 1;
  string type = 2;
  bool nullable = 3;
  bool primary_key = 4;
  // TODO: Primary key / foreign key
  optional string default_value = 5;
}

message ShowIndexesResult {
  repeated IndexDescription indexes = 1;
}

message IndexDescription {
  string column = 1;
}